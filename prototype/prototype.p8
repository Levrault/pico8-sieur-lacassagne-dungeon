pico-8 cartridge // http://www.pico-8.com
version 18
__lua__
--main
function _init()	
	player=make_player(16,64,5)
end

function _update60()
	player:update()
end

function _draw()
	cls()
	map(0,0,0,0,128,128)
	player:draw()
end

-->8
--player

--create a player
--x -- x position
--y -- y position
--l -- lifes
--@return p new player
function make_player(px,py,l)
	local p=make_actor(8,8,px,py)
	local ap=make_animation_player({
		["idle"]={
			ticks=1,
			frames={1},
			loop=true
		},
		["block"]={
			ticks=1,
			frames={2},
			loop=true
		},
		["attack"]={ --btn(4)
			ticks=4,
			frames={9,10,11,12},
			loop=false
		},
		["move"]={ --btn(0) and btn(1)
			ticks=4,
			frames={3,4,5,6},
			loop=true
		},
		["jump"]={ --btn(5)
			ticks=1,
			frames={7},
			loop=true
		},
		["fall"]={
			ticks=1,
			frames={8},
			loop=true
		}
	},"idle")
	local slash_ap=make_animation_player({
		["slash"]={
			ticks=4,
			frames={32,32,34,34},
			loop=false
		}
	},"slash")
	local hitbox=make_hitbox(0,2,16,16)

	--player properties
	p.score=0
	p.lives=l
	
	
	--player states
	p.is_alive=true
	p.is_blocking=false
	p.is_jumping=false
	p.flipx=false
	p.slash_active=false
	
	
	--jump properties
	p.jump_speed=-1.75 	-- velocity
	p.jump_hold_time=0		--	how long jump is held
	p.min_jump_pressed=5		--	min time jump can be held
	p.max_jump_pressed=15	-- max time jump can be held
	p.jump_btn_released=true
	p.grouned=false
	p.moving=false
	p.airtime=0


	--check for collision 
	--at multiple points 
	--along the top
	--of the sprite: 
	--left, center, and right.
	--collide with flag 0
	p.collide_roof=function(self)
		for i=-(self.w/3),(self.w/3),2 do
			if fget(mget((self.x+i)/8,(self.y-(self.h/2))/8),0) then
				self.dy=0
				self.y=flr((self.y-(self.h/2))/8)*8+8+(self.h/2)
				self.jump_hold_time=0
			end
		end
	end

	--btn(5), should manage jump input
	p.jump_button={
		update=function(self)
			self.is_pressed=false
			
			if btn(5) then
				if not self.is_down then
					self.is_pressed=true
				end
				
				self.is_down=true
				self.ticks_down+=1
			else
				self.is_down=false
				self.is_pressed=false
				self.ticks_down=0
			end 
		end,
			
		--state
		is_pressed=false,	-- pressed this frame
		is_down=false,				-- currently down
		ticks_down=0					-- how long down
	}	

	
	--should make the player jump
	p.jump=function(self)
		if not self:collide_floor() then
			if self.dy<0 then
				ap:set_anim("jump")
			elseif self.dy>0 then
				ap:set_anim("fall")
			end
			self.grounded=false
			self.airtime+=1
		end
		
		if self.jump_button.is_down then
			
			local on_ground=(self.grounded or self.airtime<5)
			local new_jump_btn=self.jump_button.ticks_down<10
			
			if self.jump_hold_time>0 or (on_ground and new_jump_btn) then
				self.jump_hold_time+=1
				
				if self.jump_hold_time<self.max_jump_pressed then
					self.dy=self.jump_speed
				end
			end
		else
			self.jump_hold_time=0
		end
	end
	
	
	--btn(4) will make the player
	--attack
	p.attack_button={
		update=function(self)
			self.is_pressed=false
	
			if btn(4) then
				if not self.is_down then
					self.is_pressed=true
				end
				
				self.is_down=true
			else
				self.is_pressed=false
				self.is_down=false
			end
		end,
			
		--state
		is_pressed=false,
		is_down=false
	}	
	

	--instanciate a hitbox and play the
	--player attack animation
	p.attack=function(self)
		if(self:collide_floor()==false) return
	
		if self.attack_button.is_pressed then
			ap:set_anim("attack")
			slash_ap:set_anim("slash")
			self.is_attacking=true
			self.slash_active=true
		elseif self.is_attacking and ap.finished then
			self.is_attacking=false
		end
		
	end
	
	
	--make player move left/right
	p.move=function(self)
		local btn_left=btn(0)
		local btn_right=btn(1)
		
		if btn_left==true then
			self.dx-=self.acc
			self.moving=true
			self.flipx=true
			
			ap:set_anim("move")
			
			btn_right=false
		elseif btn_right==true then
			self.dx+=self.acc
			self.moving=true
			self.flipx=false
			
			ap:set_anim("move")
			
			btn_left=false
		else
			self.moving=false
			self.dx*=self.dcc
			if self.grounded and not self.is_attacking then
				ap:set_anim("idle")
			end
		end
		
		--limit walk speed
		self.dx=mid(-self.max_dx,self.dx,self.max_dx)
		self.x+=self.dx
		p:collide_side(self)
	end


	--gravity
	p.compute_gravity=function(self)
		if(self:collide_floor()==true) return
		self.dy+=self.grav
		self.dy=mid(-self.max_dy,self.dy,self.max_dy)
		self.y+=self.dy
	end	
	
	
	--update game loop
	p.update=function(self)
		self:compute_gravity()
		self.jump_button:update()
		self:jump()
		self:collide_roof()
		self:move()
		self.attack_button:update()
		self:attack()

		--update animation player
		ap:play()
		if self.slash_active then
			slash_ap:play()
			if slash_ap.finished then
				self.slash_active=false
			end
		end
	end
	
	
	--game loop functions
	p.draw=function(self)
		local x=self.x
		local y=self.y
		local fx=self.flipx

		--player
		ap:draw(x,y,self.w,self.h,fx)

		--slash
		if self.slash_active then
			slash_ap:draw(x,y,16,16,fx)
		end
	end
	
	return p
end
-->8
--actor

--generic actor properties
--w: width
--h: height
--x: x pos
--y: y pos
function make_actor(w,h,x,y)
	local a={}
	
	--size
	a.w=w
	a.h=h
	
	--movement
	a.x=x --x position
	a.y=y --y position
	a.dx=0 --x direction speed
	a.dy=0 --y direction speed
	a.max_dx=1 --x direction speed
	a.max_dy=1 --y direction speed
	
	-- physic
	a.grav=0.20 --gravity
	a.acc=0.05 --accelaration
	a.dcc=0.01 --deceleration
	a.air_dcc=0.8 --air decceleration

	--actor state
	a.is_attacking=false
	

	--check for collision 
	--at multiple points 
	--along the bottom
	--of the sprite: 
	--left, center, and right.
	--collide with flag 0, 1
	a.collide_floor=function(self)
	
		if self.dy<0 then
			return false
		end
		
		local landed=false

		for i=-(self.w/3),(self.w/3),2 do
			local tile=mget((self.x+i)/8,(self.y+(self.h/2))/8)
			if fget(tile,0) or (fget(tile,1) and self.dy>=0) then
				self.dy=0
				self.y=(flr((self.y+(self.h/2))/8)*8)-(self.h/2)
				self.grounded=true
				self.airtime=0
				landed=true
			end
		end
		
		return landed
	end
	
	
	--check for collision 
	--at multiple points 
	--along the side
	--of the sprite: 
	--bottom, center, and top.
	--collide with flag 0
	a.collide_side=function(self)
		local offset=self.w/3
		for i=-(self.w/3),(self.w/3),2 do
			if fget(mget((self.x+(offset))/8,(self.y+i)/8),0) then
				self.dx=0
				self.x=(flr(((self.x+(offset))/8))*8)-(offset)
				return true
			end
			if fget(mget((self.x-(offset))/8,(self.y+i)/8),0) then
				self.dx=0
				self.x=(flr((self.x-(offset))/8)*8)+8+(offset)
				return true
			end
		end
		return false
	end
	
	return a
end
-->8
--animation_player
--@param a anims table
--@param c current_anim
function make_animation_player(a,c)
	local ap={}

	--props
	ap.anims=a
	ap.current_anim=c
	ap.current_frame=1
	ap.anim_tick=0
	ap.finished=false

	--draw sprite
	--@param x position
	--@param y position
	--@param w width
	--@param h height
	--@param fx flipx
	ap.draw=function(self,x,y,w,h,fx)
		-- local a=self.anims[self.current_anim]
		local frame=self.anims[self.current_anim].frames[self.current_frame]
		spr(
			frame,
			x-(w/2),
			y-(h/2),
			w/8,h/8,
			fx,
			false
		)
	end
	

	--select new animation
	--@param anim string
	ap.set_anim=function(self,anim)
		if(anim==self.current_anim) return
		
		local a=self.anims[anim]
		self.anim_tick=a.ticks			
		self.current_anim=anim		
		self.current_frame=1
	end


	--should manage what kind of animation this is
	ap.play=function(self)
		if self.anims[self.current_anim].loop then
			self:loop()
		else
			self:once()
		end
	end


	--should play all the animation frame one
	ap.once=function(self)
		self.finished=false
		self.anim_tick-=1
		if self.anim_tick<=0 then
			local a=self.anims[self.current_anim]
			self.current_frame+=1
			
			self.anim_tick=a.ticks
			
			if self.current_frame>#a.frames then
				self.current_frame=1
				self.finished=true
			end
		end	
	end


	--loop throught all animation frame until a new animation
	ap.loop=function(self)
		self.finished=true
		self.anim_tick-=1
		if self.anim_tick<=0 then
			local a=self.anims[self.current_anim]
			self.current_frame+=1
			
			self.anim_tick=a.ticks--reset timer
			
			if self.current_frame>#a.frames then
				self.current_frame=1--loop
			end
		end	
	end
	return ap
end
-->8
--hitbox

--create a damage zone
--@param f flag
--@param t ticks
--@param w width
--@param h height
function make_hitbox(f,t,w,h)
	local hb={}
	hb.flag=f
	hb.ticks=t
	hb.w=w
	hb.h=h

	hb.draw=function(self,active,x,y)
		if(not active) return
	end
	
	return hb
end
__gfx__
00000000070000000700000007000000007000000007000000700000070000000700000000070000000070000000000000000000000000000000000000000000
00000000070550000705500007055000007550000007500000755000070550000705500000755000000750000005500000055000000000000000000000000000
000000000602f000060244400602f0000062f0000006f0000062f000060244400602f0000602f0000062f0000002f0000002f000000000000000000000000000
00000000062244400622494006224440006244000026240000624400062249400622444001224440001244000022240000224440000000000000000000000000
0000000001d2494001d2444001dd4940001d49000021d400001d490001d2444001d2494000d2494000d249000021667700124940000000000000000000000000
0000000000dd444000ddd000000d4440000dd400000dd400000dd40000ddd00000dd444000dd444000ddd40000ddd40006dd444005f444000000000000000000
00000000002020000020200000022000000220000002200000022000002020000020200000202000002020000020200060202000022666700000000000000000
0000000000101000001010000001000000001000000100000000100000100000000010000010100000101000001010000010100022ddd2210000000000000000
d6666667000670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1d666676000670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11dddd66005660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11dddd66005667000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11dddd6605d666700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11dddd6605d666700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
100000d655dd66670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000d555ddd660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000777000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000066666600000000000000660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000666667000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000666667000000000000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000066667700000000000000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700000000007700000000000000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00770000000007700000000000000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700000000007770000000000000007000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700000000007770000000000000007000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000077700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000077700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00070000077777700000000007000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000077777000000000000007700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00007000007777000000000000777700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000077770000000700777770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000077777700000000007777000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0004040404040404040401000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
